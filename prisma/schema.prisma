generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int                      @id @default(autoincrement())
  email      String                   @unique
  password   String
  createdAt  DateTime                 @default(now())
  role       String
  client     Client?
  employee   Employee?
  emailCodes EmailVerificationCodes[]
  token      Token[]
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  userAgent String
}

model EmailVerificationCodes {
  id        Int      @id @default(autoincrement())
  code      String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id          Int           @id @default(autoincrement())
  name        String
  phone       String
  userId      Int           @unique
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Appointment Appointment[]
}

model Employee {
  id           Int           @id @default(autoincrement())
  fullName     String
  phone        String
  image        Image?        @relation(fields: [imageId], references: [id])
  birthday     DateTime
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  imageId      Int?          @unique
}

model Appointment {
  id         Int                  @id @default(autoincrement())
  date       DateTime
  status     String
  image      Image?               @relation(fields: [imageId], references: [id])
  createdAt  DateTime             @default(now())
  employeeId Int
  employee   Employee           @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  clientId   Int
  client     Client               @relation(fields: [clientId], references: [id], onDelete: Cascade)
  services   AppointmentService[]
  imageId    Int?                 @unique
}

// model ClientAppointment {
//   id            Int         @id @default(autoincrement())
//   clientId      Int
//   appointmentId Int
//   client        Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
//   appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
// }

model Service {
  id           Int                  @id @default(autoincrement())
  name         String
  price        Float
  description  String?
  image        Image?               @relation(fields: [imageId], references: [id])
  categoryId   Int
  category     Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  appointments AppointmentService[]
  imageId      Int?                 @unique
}

model AppointmentService {
  id            Int         @id @default(autoincrement())
  serviceId     Int
  appointmentId Int
  service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  services    Service[]
}

model Image {
  id          Int          @id @default(autoincrement())
  name        String
  type        String
  buffer      Bytes
  createdAt   DateTime     @default(now())
  employee    Employee?    @relation
  appointment Appointment? @relation
  service     Service?     @relation
}
