generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  email      String  @unique
  createdAt  DateTime @default(now())
  role       String
  client     Client?
  employee   Employee?
  emailCodes EmailVerificationCodes[]
}

model EmailVerificationCodes {
  id        Int      @id @default(autoincrement())
  code      String
  expiresAt DateTime
  isUsed    Boolean @default(false)
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id      Int    @id @default(autoincrement())
  name    String
  phone   String
  userId  Int    @unique
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments ClientAppointment[]
}

model Employee {
  id       Int     @id @default(autoincrement())
  fullName String
  phone    String
  image    String?
  birthday DateTime
  userId   Int    @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

model Appointment {
  id          Int       @id @default(autoincrement())
  date        DateTime
  status      String
  image       String?
  createdAt   DateTime @default(now())
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  clients     ClientAppointment[]
  services    AppointmentService[]
}

model ClientAppointment {
  id            Int @id @default(autoincrement())
  clientId      Int
  appointmentId Int
  client        Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model Service {
  id          Int     @id @default(autoincrement())
  name        String
  price       Float
  description String?
  image       String?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  appointments AppointmentService[]
}

model AppointmentService {
  id            Int @id @default(autoincrement())
  serviceId     Int
  appointmentId Int
  service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int    @id @default(autoincrement())
  name        String
  description String?
  services    Service[]
}
